# -*- coding: utf-8 -*-
"""Fashion MNIST

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/164LnBsJgqKZbmoeqDrHsMnPfwf_izF8H
"""

import tensorflow as tf
from tensorflow import keras

import numpy as np
import matplotlib.pyplot as plt

fashion_mnist = keras.datasets.fashion_mnist

(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

plt.figure()
plt.imshow(train_images[0])
plt.colorbar()
plt.grid(False)
plt.show()

train_images = train_images / 255.0

test_images = test_images / 255.0

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])
plt.show()

train_images_ = train_images.reshape(len(train_images), 28, 28, 1)

test_images_ = test_images.reshape(len(test_images), 28, 28, 1)

train_images_.shape

model = keras.Sequential([
    keras.layers.Conv2D(10, 3, input_shape=(28, 28, 1), activation='relu'),
    keras.layers.MaxPooling2D(),
    keras.layers.Conv2D(15, 3, activation='relu'),
    keras.layers.MaxPooling2D(),
    keras.layers.Conv2D(25, 3, activation='relu'),
    keras.layers.GlobalMaxPooling2D(),
    #keras.layers.Dense(10, activation=tf.nn.relu),
    keras.layers.Dense(10, activation=tf.nn.softmax)
])
model.build()
model.summary()

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_images_, train_labels, epochs=10)

# summarize history for accuracy
plt.plot(history.history['acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.show()

test_loss, test_acc = model.evaluate(test_images_, test_labels)

print('Test accuracy:', test_acc)

from random import randrange

idx = randrange(len(test_images))
img = test_images[idx]
img_ = test_images_[idx]
plt.imshow(img, cmap=plt.cm.binary)
plt.title(class_names[test_labels[idx]])
plt.show()

#img_ = (np.expand_dims(img,0))
img_ = img_.reshape((1, 28, 28, 1))
print(img_.shape)
predictions_single = model.predict(img_)[0]


plt.bar(range(len(predictions_single)), predictions_single)
plt.xticks(range(10), class_names, rotation=45)
plt.show()